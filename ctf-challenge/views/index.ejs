<!DOCTYPE html>
<html lang="az">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Overchain - CTF Challenges</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

    <style>
        /* Genel Stil Ayarları */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Arial', sans-serif;
            background-color: #000;
            color: #fff;
            overflow-y: auto;
            position: relative;
        }

        header {
            background: rgba(0, 0, 0, 0.7);
            padding: 60px 0;
            text-align: center;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.7);
            animation: slideIn 1s ease-in-out;
            position: relative;
            z-index: 2;
        }

        @keyframes slideIn {
            from { transform: translateY(-100%); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .logo img {
            border-radius: 50%;
            width: 200px;
            height: 200px;
            box-shadow: 0 2px 5px rgba(255, 0, 0, 0.5);
            animation: zoomIn 1s ease-in-out;
            object-fit: cover;
        }

        @keyframes zoomIn {
            from { transform: scale(0); opacity: 0; }
            to { transform: scale(1); opacity: 1; }
        }

        h1 {
            margin-top: 20px;
            font-size: 2.8em;
            text-shadow: 3px 3px 5px rgba(0, 0, 0, 0.6);
            color: #ffe3e3;
            position: relative;
            z-index: 2;
        }

        main {
            padding: 20px;
            max-width: 1000px;
            margin: 0 auto;
            animation: fadeIn 1s ease-in-out;
            position: relative;
            z-index: 2;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        section {
            background: rgba(0, 0, 0, 0.85);
            padding: 25px;
            margin: 20px 0;
            border-radius: 12px;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.8), 0 0 15px rgba(255, 0, 0, 0.6);
            position: relative;
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        section:hover {
            transform: translateY(-8px);
            box-shadow: 0 10px 20px rgba(255, 0, 0, 0.8), 0 0 20px rgba(255, 0, 0, 0.8);
        }

        h2 {
            color: #ff6666;
            margin-bottom: 15px;
            border-bottom: 2px solid #ff6666;
            padding-bottom: 10px;
        }

        ul {
            list-style-type: square;
            padding-left: 25px;
        }

        a {
            color: #ff8888;
            text-decoration: none;
            font-weight: bold;
        }

        a:hover {
            text-decoration: underline;
        }

        footer {
            background: rgba(0, 0, 0, 0.7);
            text-align: center;
            padding: 30px 0;
            margin-top: 30px;
            color: #ffcccc;
            font-size: 1.1em;
            box-shadow: 0 -4px 10px rgba(0, 0, 0, 0.7);
            position: relative;
            z-index: 2;
        }

        footer p {
            position: relative;
            z-index: 2;
        }

        /* Button Styles */
        .buttons {
            text-align: center;
            margin-top: 30px;
        }

        .button {
        display: inline-block;
        margin: 10px;
        padding: 15px 30px;
        font-size: 1.1em;
        font-weight: bold;
        color: #ff8888;
        border: 2px solid #ff8888; /* Outline border */
        border-radius: 5px;
        background-color: transparent; /* Transparent background */
        text-decoration: none;
        transition: background-color 0.3s, color 0.3s;
    }

    .button:hover {
        background-color: #ff8888;
        color: #000;
    }

        /* Particle Animation */
        .particle {
            position: absolute;
            border-radius: 50%;
            background: rgba(255, 0, 0, 0.7);
            animation: particleMove 4s infinite;
        }

        @keyframes particleMove {
            0% { transform: translateY(0) scale(1); opacity: 1; }
            100% { transform: translateY(-100vh) scale(0.1); opacity: 0; }
        }

        /* Background Video Styling */
        #background-video {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            z-index: -1;
        }

        /* Responsive Design */
        @media (max-width: 600px) {
            h1 {
                font-size: 2em;
            }
            .logo img {
                width: 150px;
                height: 150px;
            }
            main {
                padding: 15px;
            }
            section {
                padding: 20px;
            }
        }
        .button-container {
    text-align: center;
}

    </style>
</head>
<body>
    <header>
        <div class="logo">
            <img src="/images/logo.png" alt="CTF Logosu">
        </div>
        <h1>Overchain - CTF Challenge</h1>
    </header>
    <main>
        <section class="tasks">
            <h2>Tasks:</h2>
            <ul>
                <li>Your task is to chain the vulnerabilities in the system to access the admin panel and retrieve the FLAG.</li>
                <li>Code analysis is essential to identify the vulnerabilities in the system; otherwise, you will not achieve any results.</li>
                <li>INFO: Default credentials have been provided to test the system. If you change the user’s credentials and forget them or encounter an error, you should run <i>restart.sh</i> to reset the system.</li>
            </ul>
        </section>
        <section class="info">
            <h2>Explanations</h2>
            <p>This CTF was created due to our inability to chain vulnerabilities found in real systems and thus failing to identify critical ones. Each vulnerability here is a real-case scenario, and by chaining them, you will ultimately reach a critical vulnerability. Additionally, this will develop your perspective, static code analysis skills, and many other aspects I haven’t mentioned. If you encounter any issues, or have questions, suggestions, or feedback, feel free to reach out through the contact section. Happy hacking!</p>
        </section>
        <section class="contact">
            <h2>Contact</h2>
            <p>Email: <a href="mailto:bedellinicat123@gmail.com">bedellinicat123@gmail.com</a></p>
            <p>Github: <a href="https://github.com/0xs1ash">@0xs1ash</a></p>
            <p>LinkedIn: <a href="https://www.linkedin.com/in/nicat-abbasli-872016261/">Nicat Abbasli</a></p>
        </section>
        <section class="buttons">
            <h2>Actions</h2>
            <div class="button-container">
                <a href="http://localhost:4000/panel" class="button">Panel</a>
                <% if(user && user.role==='admin') {%>
                    <a href="/todo" class="button">Todo</a>   
                    <a href="http://localhost:5000/admin" class="button">Admin</a>
                    <a href="/logout" class="button">Logout</a> 
                <% }else if(user && user.role==='user'){ %>
                    <a href="/todo" class="button">Todo</a>
                    <a href="/profile" class="button">Profile</a>
                    <a href="/sendAdmin" class="button">Contact</a>
                    <a href="/logout" class="button">Logout</a>
                <% }else{ %>
                    <a href="/login" class="button">Login</a>
                <% } %>
            </div>
        </section>
        <section class="hints">
            <h2>Hints</h2>
            <div id="alert" class="alert alert-dismissible fade show" role="alert" style="display: none;">
                <strong id="alert-title"></strong> <span id="alert-message"></span>
                <button type="button" class="btn-close" aria-label="Close" onclick="hideAlert()"></button>
            </div>
            <div class="button-container">
                <button id='hint1' class="button" onclick="getHints(this)" value="hint1">Hint1</button>
                <button id="hint2" class="button" onclick="getHints(this)" value="hint2">Hint2</button>
            </div>
        </section>
    </main>
    <footer>
        <p>&copy; 2024 OVERCHAIN BEST-PRACTICE CTF.</p>
    </footer>

    <script>
        const particleCount = 60;
        const container = document.body;

        for (let i = 0; i < particleCount; i++) {
            const particle = document.createElement('div');
            particle.className = 'particle';
            const size = Math.random() * 10 + 5; 
            particle.style.width = `${size}px`;
            particle.style.height = `${size}px`;
            particle.style.left = `${Math.random() * 100}vw`;
            particle.style.animationDuration = `${Math.random() * 3 + 2}s`; 
            container.appendChild(particle);
        }

        function hideAlert() {
            const alertBox = document.getElementById('alert');
            alertBox.style.display = 'none';
        }

        function getHints(buttonElement){
            const hint = buttonElement.value
            const alertBox = document.getElementById('alert');
            if (alertBox) {
                alertBox.style.display = 'none';
            }
            if(hint){
                fetch('/getHints',{
                    method:'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ hint: hint })
                })
                .then(res=>res.json())
                .then(response=>{
                    console.log(response.message)
                    const message=response.message
                    const type=response.type
                    
                    
                    const alertTitle = document.getElementById('alert-title');
                    const alertMessage = document.getElementById('alert-message');

                    alertBox.className = `alert alert-${type} alert-dismissible fade show`;  
                    alertTitle.textContent = type === 'info' ? 'Info!' : 'Error!';
                    alertMessage.textContent = message;
                    alertBox.style.display = 'block'; 
                })
                .catch(err=>{
                    console.log(err)
                })
            }

        }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>

</body>
</html>
